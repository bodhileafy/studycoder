# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  #config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", ip: "192.168.0.119"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
	# Customize the amount of memory on the VM:
    vb.memory = "2048"
	# VirtualBox Machine Name
	vb.name = "K8SN1"
	vb.cpus = 2
	vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
	vb.customize ["modifyvm", :id, "--groups", "/STUDY-K8S"]  
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
	K8SHOST=k8smaster.local
	K8SHOSTIP=192.168.0.118
	echo "$K8SHOSTIP $K8SHOST" >> /etc/hosts
	K8SHOSTNODE1=k8snode1.local
	K8SHOSTNODE1IP=192.168.0.119
	hostnamectl set-hostname $K8SHOSTNODE1
	echo "$K8SHOSTNODE1IP $K8SHOSTNODE1" >> /etc/hosts
	swapoff -a
	setenforce 0
	sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/sysconfig/selinux
	#Install base packages
	yum -y install epel-release
	yum -y install net-tools
	yum -y install wget
	#Setup docker-ce.repo
	yum install -y device-mapper-persistent-data lvm2
	wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo
	#Setup kubenetes.repo    
cat <<	EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
	#Setup kubenetes networking
	modprobe br_netfilter
	sysctl -w net.bridge.bridge-nf-call-iptables=1
	sysctl -w net.bridge.bridge-nf-call-ip6tables=1
	sysctl --system
	echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
	#Install kubenetes and docker
	yum install -y kubelet kubeadm kubectl docker-ce-18.06.1.ce-3.el7	
	systemctl enable kubelet && systemctl start kubelet
	systemctl enable docker && systemctl start docker
	sed -i "s/\$KUBELET_EXTRA_ARGS/\$KUBELET_EXTRA_ARGS\ --cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
cat <<	EOF > /etc/docker/daemon.json
{ 
    "exec-opts": ["native.cgroupdriver=cgroupfs"]
}
EOF
	echo "[ DEBUG ] systemctl daemon-reload"
	systemctl daemon-reload
	echo "[ DEBUG ] systemctl restart docker"
	systemctl restart docker
	echo "[ DEBUG ] systemctl restart kubelet"
	systemctl restart kubelet
	echo "[ DEBUG ] systemctl status kubelet"
	systemctl status kubelet
	echo "[ DEBUG ] ping -c 30 $K8SHOSTNODE1"
	ping -c 30 $K8SHOSTNODE1
	echo "[ DEBUG ] Disable swap area permanently."
	sed -i "/swapfile/s/^/#/" /etc/fstab	
  SHELL

end
